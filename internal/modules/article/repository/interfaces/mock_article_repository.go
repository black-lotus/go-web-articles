// Code generated by mockery 2.9.0. DO NOT EDIT.

package interfaces

import (
	context "context"
	domain "webarticles/internal/modules/article/domain"

	mock "github.com/stretchr/testify/mock"
)

// MockArticleRepository is an autogenerated mock type for the ArticleRepository type
type MockArticleRepository struct {
	mock.Mock
}

// FindAll provides a mock function with given fields: ctx, filter
func (_m *MockArticleRepository) FindAll(ctx context.Context, filter *domain.Filter) ([]*domain.Article, error) {
	ret := _m.Called(ctx, filter)

	var r0 []*domain.Article
	if rf, ok := ret.Get(0).(func(context.Context, *domain.Filter) []*domain.Article); ok {
		r0 = rf(ctx, filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.Article)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *domain.Filter) error); ok {
		r1 = rf(ctx, filter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByID provides a mock function with given fields: tx, ID
func (_m *MockArticleRepository) FindByID(tx context.Context, ID *string) (*domain.Article, error) {
	ret := _m.Called(tx, ID)

	var r0 *domain.Article
	if rf, ok := ret.Get(0).(func(context.Context, *string) *domain.Article); ok {
		r0 = rf(tx, ID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Article)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *string) error); ok {
		r1 = rf(tx, ID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Insert provides a mock function with given fields: ctx, newData
func (_m *MockArticleRepository) Insert(ctx context.Context, newData *domain.Article) (*domain.Article, error) {
	ret := _m.Called(ctx, newData)

	var r0 *domain.Article
	if rf, ok := ret.Get(0).(func(context.Context, *domain.Article) *domain.Article); ok {
		r0 = rf(ctx, newData)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Article)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *domain.Article) error); ok {
		r1 = rf(ctx, newData)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Save provides a mock function with given fields: ctx, data
func (_m *MockArticleRepository) Save(ctx context.Context, data *domain.Article) (*domain.Article, error) {
	ret := _m.Called(ctx, data)

	var r0 *domain.Article
	if rf, ok := ret.Get(0).(func(context.Context, *domain.Article) *domain.Article); ok {
		r0 = rf(ctx, data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Article)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *domain.Article) error); ok {
		r1 = rf(ctx, data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
