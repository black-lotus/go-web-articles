// Code generated by mockery 2.9.0. DO NOT EDIT.

package interfaces

import (
	context "context"

	redis "github.com/gomodule/redigo/redis"
	mock "github.com/stretchr/testify/mock"
)

// MockRedisPool is an autogenerated mock type for the RedisPool type
type MockRedisPool struct {
	mock.Mock
}

// Disconnect provides a mock function with given fields: ctx
func (_m *MockRedisPool) Disconnect(ctx context.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ReadPool provides a mock function with given fields:
func (_m *MockRedisPool) ReadPool() *redis.Pool {
	ret := _m.Called()

	var r0 *redis.Pool
	if rf, ok := ret.Get(0).(func() *redis.Pool); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.Pool)
		}
	}

	return r0
}

// Store provides a mock function with given fields:
func (_m *MockRedisPool) Store() Store {
	ret := _m.Called()

	var r0 Store
	if rf, ok := ret.Get(0).(func() Store); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(Store)
		}
	}

	return r0
}

// WritePool provides a mock function with given fields:
func (_m *MockRedisPool) WritePool() *redis.Pool {
	ret := _m.Called()

	var r0 *redis.Pool
	if rf, ok := ret.Get(0).(func() *redis.Pool); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.Pool)
		}
	}

	return r0
}
